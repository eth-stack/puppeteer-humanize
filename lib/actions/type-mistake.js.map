{"version":3,"file":"type-mistake.js","sourceRoot":"","sources":["../../src/actions/type-mistake.ts"],"names":[],"mappings":";;;;AAAA,wCAA8C;AAC9C,wCAKmB;AAGnB;;;;;;;;;GASG;AACI,MAAM,WAAW,GAAG,CACzB,OAAsB,EACtB,IAAY,EACZ,UAA8B,EAAE,EACjB,EAAE;IACjB,MAAM,IAAI,GAAgB,2BAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;IAC1D,MAAM,WAAW,GAAuB,IAAA,0BAAgB,EAAC,IAAI,CAAC,CAAA;IAC9D,IAAI,WAAW,IAAI,IAAA,gBAAM,EAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACtC,MAAM,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAA,uBAAa,GAAE,CAAC,CAAA;QAChD,MAAM,IAAA,wBAAc,EAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAChC,MAAM,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,IAAA,uBAAa,GAAE,CAAC,CAAA;QACjD,MAAM,IAAA,wBAAc,EAAC;YACnB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;YACzB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;SACxB,CAAC,CAAA;KACH;AACH,CAAC,CAAA,CAAA;AAhBY,QAAA,WAAW,eAgBvB","sourcesContent":["import { TypeMistakeSchema } from \"../schemas\"\nimport {\n  chance,\n  getProximateChar,\n  keypressDelay,\n  waitForTimeout\n} from \"../support\"\nimport { ElementHandle, TypeMistake, TypeMistakeOptions } from \"../types\"\n\n/**\n * Types and deletes a mistake based on a source character.\n * Locates a proximate character based on physical location on an EN format keyboard.\n *\n * @todo Add support for multilingual keyboard formats and characters.\n * @param {ElementHandle} element\n * @param {string} char\n * @param {TypeMistakeOptions} options\n * @return {Promise<void>}\n */\nexport const typeMistake = async (\n  element: ElementHandle,\n  char: string,\n  options: TypeMistakeOptions = {}\n): Promise<void> => {\n  const opts: TypeMistake = TypeMistakeSchema.parse(options)\n  const mistakeChar: string | undefined = getProximateChar(char)\n  if (mistakeChar && chance(opts.chance)) {\n    await element.type(mistakeChar, keypressDelay())\n    await waitForTimeout(opts.delay)\n    await element.press(\"Backspace\", keypressDelay())\n    await waitForTimeout({\n      min: opts.delay.min * 1.5,\n      max: opts.delay.max * 2\n    })\n  }\n}\n"]}