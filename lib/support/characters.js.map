{"version":3,"file":"characters.js","sourceRoot":"","sources":["../../src/support/characters.ts"],"names":[],"mappings":";;;;AAAA,uEAAgD;AAChD,kEAA2C;AAG3C;;;GAGG;AACU,QAAA,SAAS,GAAoC;IACxD,KAAK,EAAE,KAAK,CAAC,WAAW;IACxB,OAAO,EAAE,KAAK,CAAC,aAAa;IAC5B,UAAU,EAAE,KAAK,CAAC,gBAAgB;IAClC,WAAW,EAAE,KAAK,CAAC,iBAAiB;IACpC,WAAW,EAAE,KAAK,CAAC,iBAAiB;CACrC,CAAA;AAED;;;;;GAKG;AACI,MAAM,YAAY,GAAG,CAAC,KAAa,EAAW,EAAE,CACrD,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAA;AAD1B,QAAA,YAAY,gBACc;AAEvC;;;;;GAKG;AACI,MAAM,aAAa,GAAG,CAAC,KAAa,EAAW,EAAE,CACtD,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAA;AAD3B,QAAA,aAAa,iBACc;AAExC;;;;;GAKG;AACI,MAAM,aAAa,GAAG,CAAC,KAAa,EAAW,EAAE,CACtD,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAA;AAD3B,QAAA,aAAa,iBACc;AAExC;;;;;;GAMG;AACI,MAAM,OAAO,GAAG,CAAC,KAAa,EAAW,EAAE,CAChD,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;AADrB,QAAA,OAAO,WACc;AAElC;;;;;GAKG;AACI,MAAM,SAAS,GAAG,CAAC,KAAa,EAAW,EAAE,CAClD,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;AADvB,QAAA,SAAS,aACc;AAEpC;;;;;GAKG;AACI,MAAM,WAAW,GAAG,CAAC,KAAa,EAAW,EAAE,CACpD,IAAA,eAAO,EAAC,KAAK,CAAC;IACd,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK;IAC7B,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,CAAA;AAHlB,QAAA,WAAW,eAGO;AAE/B;;;;;GAKG;AACI,MAAM,WAAW,GAAG,CAAC,KAAa,EAAW,EAAE,CACpD,IAAA,eAAO,EAAC,KAAK,CAAC;IACd,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK;IAC7B,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,CAAA;AAHlB,QAAA,WAAW,eAGO;AAE/B;;;;GAIG;AACU,QAAA,aAAa,GACxB,IAAI,GAAG,CAAC;IACN,CAAC,aAAa,EAAE,qBAAa,CAAC;IAC9B,CAAC,aAAa,EAAE,qBAAa,CAAC;IAC9B,CAAC,YAAY,EAAE,oBAAY,CAAC;IAC5B,CAAC,OAAO,EAAE,eAAO,CAAC;IAClB,CAAC,SAAS,EAAE,iBAAS,CAAC;CACvB,CAAC,CAAA;AAEJ;;;;;GAKG;AACI,MAAM,cAAc,GAAG,CAAC,IAAY,EAA6B,EAAE;IACxE,KAAK,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,qBAAa,CAAC,OAAO,EAAE,EAAE;QACtD,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;YACd,OAAO,QAAQ,CAAA;SAChB;KACF;IAED,OAAO,SAAS,CAAA;AAClB,CAAC,CAAA;AARY,QAAA,cAAc,kBAQ1B","sourcesContent":["import * as CHARS from \"../constants/characters\"\nimport * as REGEX from \"../constants/regex\"\nimport { CharacterType } from \"../types\"\n\n/**\n * Lookup object of character types as arrays.\n * @type {Record<CharacterType, string[]>}\n */\nexport const charTypes: Record<CharacterType, string[]> = {\n  alpha: CHARS.ALPHA_CHARS,\n  numeric: CHARS.NUMERIC_CHARS,\n  whitespace: CHARS.WHITESPACE_CHARS,\n  punctuation: CHARS.PUNCTUATION_CHARS,\n  termination: CHARS.TERMINATION_CHARS\n}\n\n/**\n * Determines if a specified character is whitespace.\n *\n * @param {string} input\n * @return {boolean}\n */\nexport const isWhitespace = (input: string): boolean =>\n  !!input.match(REGEX.WHITESPACE_REGEX)\n\n/**\n * Determines if a specified character is punctuation.\n *\n * @param {string} input\n * @return {boolean}\n */\nexport const isPunctuation = (input: string): boolean =>\n  !!input.match(REGEX.PUNCTUATION_REGEX)\n\n/**\n * Determines if a specified character is a termination character.\n *\n * @param {string} input\n * @return {boolean}\n */\nexport const isTermination = (input: string): boolean =>\n  !!input.match(REGEX.TERMINATION_REGEX)\n\n/**\n * Determines if a specified character is an alphabet character.\n * Tests for both uppercase and lowercase.\n *\n * @param {string} input\n * @return {boolean}\n */\nexport const isAlpha = (input: string): boolean =>\n  !!input.match(REGEX.ALPHA_REGEX)\n\n/**\n * Determines if a specified character is numeric.\n *\n * @param {string} input\n * @return {boolean}\n */\nexport const isNumeric = (input: string): boolean =>\n  !!input.match(REGEX.NUMERIC_REGEX)\n\n/**\n * Determines if a specified character is lower case.\n *\n * @param {string} input\n * @return {boolean}\n */\nexport const isLowerCase = (input: string): boolean =>\n  isAlpha(input) &&\n  input.toLowerCase() === input &&\n  input.toUpperCase() !== input\n\n/**\n * Determines if a specified character is upper case.\n *\n * @param {string} input\n * @return {boolean}\n */\nexport const isUpperCase = (input: string): boolean =>\n  isAlpha(input) &&\n  input.toUpperCase() === input &&\n  input.toLowerCase() !== input\n\n/**\n * Provides a typed map of each character type test function.\n *\n * @type {Map<string, (input: string) => boolean>}\n */\nexport const charTypeTests: Map<CharacterType, (input: string) => boolean> =\n  new Map([\n    [\"punctuation\", isPunctuation],\n    [\"termination\", isTermination],\n    [\"whitespace\", isWhitespace],\n    [\"alpha\", isAlpha],\n    [\"numeric\", isNumeric]\n  ])\n\n/**\n * Detects a character type of a provided character.\n *\n * @param {string} char\n * @return {CharacterType | undefined}\n */\nexport const detectCharType = (char: string): CharacterType | undefined => {\n  for (const [charType, test] of charTypeTests.entries()) {\n    if (test(char)) {\n      return charType\n    }\n  }\n\n  return undefined\n}\n"]}