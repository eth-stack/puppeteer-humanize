{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/support/utils.ts"],"names":[],"mappings":";;;;AAAA,gFAA8C;AAG9C,6CAAgD;AAEhD;;;GAGG;AACH,MAAM,SAAS,GAAoB,IAAI,0BAAe,EAAE,CAAA;AAExD;;;;;;GAMG;AACI,MAAM,IAAI,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAS,EAAU,EAAE;IAClD,IAAI,GAAG,GAAG,GAAG,EAAE;QACb,MAAM,IAAI,8BAAiB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAA;KAC1C;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAA;AAC/D,CAAC,CAAA;AALY,QAAA,IAAI,QAKhB;AAED;;;;;;;GAOG;AACI,MAAM,cAAc,GAAG,CAAO,EAAE,GAAG,EAAE,GAAG,EAAS,EAAiB,EAAE;IACzE,OAAA,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACtB,UAAU,CACR,GAAG,EAAE;YACH,OAAO,EAAE,CAAA;QACX,CAAC,EACD,GAAG,CAAC,CAAC,CAAC,IAAA,YAAI,EAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAC/B,CAAA;IACH,CAAC,CAAC,CAAA;EAAA,CAAA;AARS,QAAA,cAAc,kBAQvB;AAEJ;;;;;GAKG;AACI,MAAM,MAAM,GAAG,CAAC,cAAsB,EAAE,EAAW,EAAE,CAC1D,IAAA,YAAI,EAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,WAAW,CAAA;AAD7B,QAAA,MAAM,UACuB","sourcesContent":["import MersenneTwister from \"mersenne-twister\"\n\nimport { Range } from \"../types\"\nimport { InvalidRangeError } from \"./exceptions\"\n\n/**\n * Provides a MersenneTwister pseudo-random generator.\n * @type {MersenneTwister}\n */\nconst generator: MersenneTwister = new MersenneTwister()\n\n/**\n * Simple random number generator using a Mersenne Twister.\n *\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\nexport const rand = ({ min, max }: Range): number => {\n  if (min > max) {\n    throw new InvalidRangeError({ min, max })\n  }\n  return Math.floor(generator.random() * (max - min + 1) + min)\n}\n\n/**\n * Simple random delay function.\n * Uses Puppeteer naming convention for consistency.\n *\n * @param {number} min\n * @param {number} max\n * @return {Promise<void>}\n */\nexport const waitForTimeout = async ({ min, max }: Range): Promise<void> =>\n  new Promise((resolve) => {\n    setTimeout(\n      () => {\n        resolve()\n      },\n      max ? rand({ min, max }) : min\n    )\n  })\n\n/**\n * Simple dice roll function that accepts a probability threshold.\n *\n * @param {number} probability\n * @return {boolean}\n */\nexport const chance = (probability: number = 50): boolean =>\n  rand({ min: 0, max: 100 }) < probability\n"]}