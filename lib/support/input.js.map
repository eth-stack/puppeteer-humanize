{"version":3,"file":"input.js","sourceRoot":"","sources":["../../src/support/input.ts"],"names":[],"mappings":";;;AAAA,4CAIqB;AAErB,6CAA4D;AAC5D,mCAA8B;AAE9B;;;;;GAKG;AACI,MAAM,aAAa,GAAG,CAAC,IAAY,EAAU,EAAE;IACpD,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,sBAAS,CAAA;IACpC,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;QACzB,CAAC,CAAC,KAAK,CAAC,IAAA,YAAI,EAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC,OAAO,CAAC,IAAA,YAAI,EAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AACpD,CAAC,CAAA;AALY,QAAA,aAAa,iBAKzB;AAED;;;;;GAKG;AACI,MAAM,gBAAgB,GAAG,CAAC,IAAY,EAAsB,EAAE;IACnE,IAAI,IAAA,oBAAO,EAAC,IAAI,CAAC,IAAI,IAAA,sBAAS,EAAC,IAAI,CAAC,EAAE;QACpC,MAAM,KAAK,GAAyB,2BAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QACvE,IAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,EAAE;YACjB,OAAO,KAAK,CAAC,IAAA,YAAI,EAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;SAClD;KACF;IACD,OAAO,SAAS,CAAA;AAClB,CAAC,CAAA;AARY,QAAA,gBAAgB,oBAQ5B;AAED;;;;;GAKG;AACI,MAAM,SAAS,GAAG,CAAC,QAAgB,EAAW,EAAE;IACrD,MAAM,QAAQ,GAAa,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAClC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC9B,IAAI,QAAQ,GAAG,OAAO,KAAK,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAA;SACZ;KACF;IACD,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AARY,QAAA,SAAS,aAQrB;AAEM,MAAM,aAAa,GAAG,GAAkB,EAAE;IAC/C,OAAO,EAAE,KAAK,EAAE,IAAA,YAAI,EAAC,EAAE,GAAG,EAAE,+BAAmB,EAAE,GAAG,EAAE,+BAAmB,EAAE,CAAC,EAAE,CAAA;AAChF,CAAC,CAAA;AAFY,QAAA,aAAa,iBAEzB","sourcesContent":["import {\n  KEY_PRESS_MAX_DELAY,\n  KEY_PRESS_MIN_DELAY,\n  PROXIMATE_CHARS\n} from \"../constants\"\nimport { KeypressDelay } from \"../types/input\"\nimport { charTypes, isAlpha, isNumeric } from \"./characters\"\nimport { rand } from \"./utils\"\n\n/**\n * Selects a random alphanumeric character based on the source character type.\n *\n * @param {string} char\n * @return {string}\n */\nexport const getRandomChar = (char: string): string => {\n  const { alpha, numeric } = charTypes\n  return alpha.includes(char)\n    ? alpha[rand({ min: 0, max: alpha.length })]\n    : numeric[rand({ min: 0, max: numeric.length })]\n}\n\n/**\n * Selects a random character proximate to the source character.\n *\n * @param {string} char\n * @return {string | undefined}\n */\nexport const getProximateChar = (char: string): string | undefined => {\n  if (isAlpha(char) || isNumeric(char)) {\n    const chars: string[] | undefined = PROXIMATE_CHARS[char.toUpperCase()]\n    if (chars?.length) {\n      return chars[rand({ min: 0, max: chars.length })]\n    }\n  }\n  return undefined\n}\n\n/**\n * Determines if a character in a sequence falls on a defined natural typing cadence.\n *\n * @param {number} position\n * @return {boolean}\n */\nexport const isCadence = (position: number): boolean => {\n  const cadences: number[] = [6, 10]\n  for (const cadence of cadences) {\n    if (position % cadence === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nexport const keypressDelay = (): KeypressDelay => {\n  return { delay: rand({ min: KEY_PRESS_MIN_DELAY, max: KEY_PRESS_MAX_DELAY }) }\n}\n"]}