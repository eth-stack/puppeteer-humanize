{"version":3,"file":"timer.js","sourceRoot":"","sources":["../../src/support/timer.ts"],"names":[],"mappings":";;;AAEA;;;;;;GAMG;AACH,MAAa,KAAK;IAehB;;;OAGG;IACH,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAA;IACxB,CAAC;IAED;;;OAGG;IACH,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAA;IACxB,CAAC;IAED;;;OAGG;IACI,KAAK;QACV,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC5B,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;OAGG;IACI,IAAI;QACT,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC5B,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;OAIG;IACI,UAAU;QACf,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAA;IAC1B,CAAC;IAED;;;;OAIG;IACI,UAAU;QACf,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAA;IAC1B,CAAC;IAED;;;;OAIG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU;YACvC,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;YACnC,CAAC,CAAC,SAAS,CAAA;IACf,CAAC;CACF;AA7ED,sBA6EC","sourcesContent":["import { PerformanceTimer } from \"../types\"\n\n/**\n * Basic start / stop performance timer for collecting data on action durations.\n * Used as the return type for most action functions.\n *\n * @class Timer\n * @implements PerformanceTimer\n */\nexport class Timer implements PerformanceTimer {\n  /**\n   * Internally tracks the registered start time.\n   * @type {number | undefined}\n   * @private\n   */\n  private _startedAt: number | undefined\n\n  /**\n   * Internally tracks the registered stop time.\n   * @type {number | undefined}\n   * @private\n   */\n  private _stoppedAt: number | undefined\n\n  /**\n   * Read only accessor for the start time.\n   * @return {number | undefined}\n   */\n  public get startedAt(): number | undefined {\n    return this._startedAt\n  }\n\n  /**\n   * Read only accessor for the stop time.\n   * @return {number | undefined}\n   */\n  public get stoppedAt(): number | undefined {\n    return this._stoppedAt\n  }\n\n  /**\n   * Command to start the timer.\n   * Returns self for chaining.\n   */\n  public start(): PerformanceTimer {\n    this._startedAt = Date.now()\n    return this\n  }\n\n  /**\n   * Command to stop the timer.\n   * Returns self for chaining.\n   */\n  public stop(): PerformanceTimer {\n    this._stoppedAt = Date.now()\n    return this\n  }\n\n  /**\n   * Determines if the timer has started.\n   *\n   * @return {boolean}\n   */\n  public hasStarted(): boolean {\n    return !!this._startedAt\n  }\n\n  /**\n   * Determines if the timer has stopped.\n   *\n   * @return {boolean}\n   */\n  public hasStopped(): boolean {\n    return !!this._stoppedAt\n  }\n\n  /**\n   * Calculates the duration of the timer, provided the timer has stopped.\n   *\n   * @return {number | undefined}\n   */\n  public duration(): number | undefined {\n    return this._startedAt && this._stoppedAt\n      ? this._stoppedAt - this._startedAt\n      : undefined\n  }\n}\n"]}